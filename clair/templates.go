// Code generated by go-bindata.
// sources:
// templates/analysis-template.html
// DO NOT EDIT!

package clair

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAnalysisTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5c\xfb\x6e\xe3\x36\xd6\xff\x7f\x9e\x82\x55\xbe\xc2\x99\x7e\x91\x1c\x3b\x99\x34\xf5\xd8\x5e\x4c\x33\x13\xb4\xc0\x6c\x5b\x6c\xba\x05\x16\x45\x51\xd0\x12\x2d\x11\x91\x45\xad\x44\x4f\x92\x0d\xfc\xee\x7b\x48\x91\xb2\x24\x52\x17\x27\x5e\x2c\xb0\x9a\x66\xec\x88\x3c\x3f\x9e\x0b\xcf\x8d\xd2\x74\xfe\xd5\xc7\x9f\x6f\x7e\xfd\xc7\x2f\x9f\x50\xc4\x37\xf1\xf2\xcd\x5c\x7c\xa0\x18\x27\xe1\xc2\x21\x89\xb3\x7c\x03\x77\x08\x0e\x96\x6f\x10\x5c\x73\x4e\x79\x4c\x96\x37\x31\xa6\x19\xba\x61\x09\xcf\x58\x8c\x32\x92\xb2\x8c\xa3\x19\x7a\x7e\xf6\x7e\xdc\xe0\x90\xfc\x84\x37\x64\xb7\x9b\x8f\x8b\xc9\x6f\x0a\xca\x98\x26\xf7\x28\xca\xc8\x7a\x31\x8a\x38\x4f\xf3\xd9\x78\xbc\x06\x80\xdc\x0b\x19\x0b\x63\x82\x53\x9a\x7b\x3e\xdb\x8c\xfd\x3c\xff\xcb\x1a\x6f\x68\xfc\xb4\xf8\x39\x25\xc9\xff\xdf\xe1\x24\x9f\x5d\x9e\x9f\x9f\x5d\x15\x3f\x94\xe3\x98\xfa\x67\x97\xe5\xb7\x8b\xea\xb7\x11\x70\x13\x2f\x46\x39\x7f\x8a\x49\x1e\x11\xc2\x47\x88\x3f\xa5\x64\x31\xe2\xe4\x91\x0b\xec\xd1\xb2\xc2\x8e\x98\xeb\xec\xe7\x3a\x05\x7f\x8e\xe6\x6f\x83\x1f\xfd\x20\xf1\x56\x8c\xf1\x9c\x67\x38\x15\xbf\x08\x16\x05\xdf\x2e\x7e\x20\x39\xdb\x90\xf1\xa5\x77\xe5\x4d\x04\x72\xed\xb6\xb7\xa1\x30\x37\xcf\x1d\x2d\xbe\x5c\xa5\x58\x5b\x5c\x2b\x16\x3c\xa1\xe7\xf2\x57\x71\x49\xf2\x42\xf2\x19\x1a\x09\xd9\x91\x90\x7d\x74\x86\x72\xf8\x70\x73\x92\xd1\xf5\xfb\x1a\xc5\x06\x67\x21\x4d\x66\xe8\xbc\x7e\x3b\xc5\x41\x40\x93\xd0\xb8\xbf\xc2\xfe\x7d\x98\xb1\x6d\x12\xcc\x50\x18\xb1\x9c\x3f\x44\x94\x13\x2b\xad\xbb\x62\x9c\xb3\xcd\x0c\x4d\xc9\x66\x3f\x61\x57\x7e\x1b\x7f\x83\x7e\x7d\x4a\x59\x08\x4a\x89\x9e\xd0\x37\xe3\x72\xa0\xfc\xe2\x81\x49\x03\x9b\x84\x39\xfd\x17\x99\xa1\x89\x77\xd9\x8a\x1c\xc6\x6c\x85\xc5\x16\x7c\x62\x5b\x6e\x07\xf7\x01\x09\xd3\x84\x64\x8d\x15\xf6\xa2\x57\x85\xdf\xd9\x10\x80\xbf\x6c\x4d\x1f\x67\x78\xcd\x0d\x18\x01\x4f\x12\x3e\x43\x8e\x53\x57\x4f\x40\xf3\x14\xf8\x9a\xa1\x55\xcc\xfc\xfb\xfa\x98\x44\x84\x11\xc6\xa3\xee\xa5\x33\xf6\xd0\x58\xaf\x34\x24\x72\xa7\xe7\xe9\x63\x2f\xb9\x95\xe9\x63\xf0\xf6\xbb\x1f\xe3\x3c\xff\x66\xe1\xf8\x2c\x76\x9d\x3f\xda\xb5\x5b\x67\x53\x5c\xeb\x98\x61\xd0\x58\x4c\xd6\xbc\xb1\xed\xd8\xa3\x30\xba\x24\x5c\xb1\x2c\x20\x19\xec\xae\x1e\x19\xc5\xf2\x57\x8d\xd5\x1f\x68\xc0\xa3\x19\x7a\x77\xfe\x75\x37\x6d\x8a\x13\x12\x37\x68\x61\x57\x95\xcc\x4f\x60\xe3\x55\x77\x55\xc1\xa3\xe4\x2b\xc3\x01\xdd\xe6\x33\x74\xd9\x14\xae\xea\x3a\x16\xaf\x91\x22\x46\x38\x00\xcb\x20\x50\x0c\x9a\xc0\xcf\x14\x7e\x4e\xc8\x54\xfc\x19\xc2\x6f\x34\xb5\xee\x09\x97\xb3\xb4\xcd\xc1\x4b\x27\xf5\x6a\x5e\x5a\x91\x47\x4f\xc8\x59\x4c\x03\xc9\x55\x08\x5e\x93\xc3\x28\x1b\xc0\xd3\x0c\xf6\x02\x77\xfd\x88\xc6\x4d\x47\x56\xbc\x69\x78\xab\xab\x81\xca\x7f\x80\x10\x00\xdb\xd4\xea\xc1\x38\x4d\xdd\xa8\x18\x7f\x6e\x55\xf5\xc9\x74\xf2\xdd\xd5\xed\x45\x63\x2f\xb3\x98\x65\x56\x33\xec\xdd\x48\x18\x41\xfd\xb4\xc4\xc6\xc9\x95\xb0\x91\x31\x5e\xb3\x24\x78\xa3\x30\xa6\x98\x79\x32\xbd\xba\x98\x5e\x5c\x37\xc0\x58\x4e\x39\x65\xb0\x22\x24\x12\xcc\xe9\x17\xd2\xad\xd5\x8a\xcc\xd1\xa4\x2d\x04\xbc\x37\x43\xe6\x03\xa1\x61\x24\x7c\x4b\x7c\x90\xac\x3e\x43\x24\x36\x17\xb2\x53\x92\xaf\x59\x06\xc6\xd8\xa6\x29\xc9\x7c\x9c\x0f\xe0\x85\x8a\xfc\xdd\xe6\xe3\xa6\x6e\xe4\x4a\x90\x68\x43\x60\xd3\x87\xf0\xd8\xe4\x44\x19\xc6\xaa\xaa\xaa\x55\xb3\x70\x85\x4f\xa7\xef\xde\x9d\xa1\xfd\x5f\xde\xf5\xdb\x81\x3b\xf8\xe4\xd3\xcd\xa7\xdb\xdb\xc9\x50\xe9\x0c\xbf\xaa\x24\x21\xc3\x6d\xba\xb5\x6d\x5b\x28\xdf\x6e\xc0\x72\xcd\x54\x0e\xc5\x05\x01\x4b\x17\x38\xde\x55\x6b\xa6\x53\x95\x93\xd5\x41\xd4\x58\x7b\x50\xe8\xcf\x14\x32\x3d\xb7\xa6\x1a\xbc\xe5\xac\xe9\x3f\x8f\xae\x8a\xb2\xdf\x5d\x19\xe6\xaf\xae\x7d\xd1\xb2\x36\xc8\x74\x27\x0a\x1d\xc4\xd6\x88\x47\x04\x15\x1c\x58\xe5\x2b\x86\xbc\x84\x05\xa4\xb9\x05\x3b\xdc\x4a\x5c\x65\xa2\xa3\x89\x54\xb4\x25\xdf\x69\xdd\x4f\x8d\x48\xae\xe4\x33\x07\xb4\x62\xa6\xc3\xb4\x5a\x30\xee\x05\xac\x69\xa2\x3e\xee\x5f\xc0\x5a\x23\x3b\x99\x13\xda\x73\x6f\xb5\xe4\xcb\xf0\xd3\xfb\x66\x56\xac\xc7\x3b\x9d\xb7\xa4\x87\x9e\x9f\xa1\xe2\x3f\x6f\x5a\xf1\xcd\x82\x97\xaa\x43\x5a\xdd\x19\x48\xaa\x66\xef\xd1\xa3\xf7\x91\xac\xa1\xe6\x9a\xd8\xf4\x59\x15\x61\x15\xe3\xaa\xa5\xfb\x50\x6f\x32\xb0\x84\x0f\xa5\x64\x0f\xec\x09\xb9\x9e\x90\x49\x4f\xc0\xac\x02\xff\x00\x26\xec\x05\xfd\xf4\xdd\xe4\xd3\xd5\xc5\x70\xd0\xbf\x12\x30\xef\xa6\x17\xf6\xf6\xf6\xc3\xb7\xd3\xab\xe1\xb0\x9f\xa1\xda\xec\xc3\xbc\xfe\xfe\xe6\xe2\xf2\xc3\x70\xcc\x9f\x48\x08\xd1\x91\xae\x62\xab\x07\xd4\xa0\x2f\xbe\xbd\xfc\xf6\xf2\x76\x38\xf4\xdf\x93\xfb\x84\x3d\x24\xc7\xc6\x85\x92\x86\xa5\xdb\xb4\xad\x64\x4e\x58\x42\xac\xce\x08\x2d\xa5\x51\x42\x94\x0e\x8e\x57\xe0\x05\x5b\xb3\x18\x2c\x52\xd6\xe4\xbc\x5a\xa9\x8a\xab\x51\x36\x99\x19\x56\x4d\x10\x7e\x3c\x43\xee\xe4\x9d\x31\xa1\x18\x99\x1e\xa9\x3c\xed\x70\x73\x29\x68\x59\x2b\x59\xca\xa4\xee\x7a\x59\x46\x96\x66\xa0\xd0\xd5\x70\xb3\xf8\x96\x75\xc5\x3e\x08\x89\x3f\xb2\x9e\x49\x71\x06\x55\xc6\xa1\x26\xee\x6e\xe8\x46\xa3\xc3\x8c\x29\xb3\x9d\x69\xc9\xc2\x0e\xef\x5a\x0c\xac\xed\x67\xa8\xad\xab\x45\x53\x1b\xee\xdc\x9e\x2d\x9a\xad\x7c\xa1\x7f\x45\x33\x91\x46\x95\xf5\x6e\xbb\xad\xaa\x65\x73\x55\xbf\x6d\xdf\xad\x20\xf2\x14\x43\xd9\xf4\x60\xc3\xac\x08\x54\xa8\xcd\x64\xff\x3f\x6e\x19\xb1\xef\xe5\x5f\xfd\x96\x31\xbc\xf1\xbf\x62\x25\xb4\x04\x5d\x7c\x69\x18\x89\x7d\x21\x19\xd4\x18\xe0\x9e\x11\x0d\x02\x92\x58\xfa\x82\xfd\x14\x12\xc7\x34\xcd\x69\x3e\x78\xe5\x59\x24\x88\x6d\x11\x9f\xa5\xd8\xa7\x1c\xac\xe2\x5d\x1f\x8c\xd6\x19\xef\x2d\x56\x16\xc5\xaf\xb6\xe9\xe4\xda\xb0\x95\x32\x52\x40\x37\xf5\x3a\xaa\x56\xfb\xae\x70\x96\xdb\xab\x5d\x18\x71\x57\x61\x1b\x3b\xed\x85\x6c\x59\x13\x1a\x0c\x69\x5e\xaf\xda\xf3\xd3\xb0\xae\x54\xb2\x86\x0f\x39\x4d\x1a\xe4\x9a\x86\x5f\x18\x67\x05\xe2\x2a\x1c\xb2\xe3\xa0\xd2\x28\xa3\x0a\xb0\x7a\x41\xdc\x57\xb2\x2b\x11\xcb\x32\xf3\x55\x15\xa6\x06\x2b\xab\xcb\x57\x16\x96\x1a\x4f\x16\x95\xaf\xac\x27\x35\x96\xaa\x25\x5f\x59\x46\x6a\xb4\xcf\xc6\x81\xe5\xc1\xd5\xa3\x86\xaa\x54\x8e\xaf\x2c\xee\x34\xa2\x2e\x18\x5f\x04\x07\x3e\xfb\x65\x1b\x27\x24\xc3\x2b\x1a\x83\x39\x49\x8b\xfb\x76\x34\xe3\x22\x5a\x40\x7c\x3f\xa4\x9b\xb6\x9e\xea\x16\x2b\x78\x0d\x76\xce\xcc\x19\x6b\x82\xf9\x36\x03\x4e\x97\x68\xdb\xdc\x7c\x07\x3c\x11\xe8\x62\xa2\x6b\x89\x98\xe6\x5c\x67\x98\x7a\xd9\x6c\x43\x54\x48\x4d\xeb\xbc\xea\x70\x47\x61\xb6\x1f\x4f\xd6\xf3\xea\xc9\xcd\xed\xc7\xeb\x8f\x37\x83\x30\xff\xfc\x53\x3e\xb3\x6a\x3b\x13\x9b\xd8\x4f\x72\xf6\x30\xcd\xcd\x64\xc5\x51\x55\xc8\x54\x1c\x0c\xa1\xaf\xe8\x46\xe8\x1c\xf7\x15\xba\x55\xe4\xe6\x71\x93\x71\x1e\x7c\xdd\x3c\xd8\xd2\x33\x32\x75\xf6\xe0\xb5\x3c\xd7\x69\x97\x64\xdf\xa2\x27\x78\x63\x16\x71\x52\xd3\x03\x82\xa7\x01\xbb\xef\xd1\xdb\x71\x07\x85\x51\x03\xb9\x68\xd2\x3b\x50\x87\x04\x54\x03\x55\x77\xe9\x1d\xb8\x43\x42\xab\x81\x2b\xdb\xf4\x0e\xd0\x21\x41\xd6\x00\xad\xf6\xe9\x1d\xd8\x43\xc2\xad\x81\x5d\x36\xea\x2f\x02\x86\xc0\x0b\xd5\x05\x69\x2b\x97\xe4\x98\xfa\xb0\xfb\xa4\xbf\xcd\x72\xb1\x46\xca\xa8\x79\x12\x6d\x77\x58\x71\xb5\x47\x9e\x66\x94\xe8\x92\x43\x5c\x96\x50\x6b\xd3\x9b\x45\x12\x55\xa1\x76\xa5\xfa\x01\x51\x50\x22\x7a\x7e\xcc\x72\x12\x54\x22\xf6\xa0\x03\x8e\x8e\x93\x6c\x57\x54\xf3\x6d\x28\xeb\x98\x18\x27\x16\xfb\x24\x67\xd6\xa8\xdd\x87\xcd\xb5\xc3\x10\xc3\x52\xb5\xe3\xe6\xbe\x68\x55\x63\xde\x76\xa6\xdc\xf7\xec\x42\x48\x06\x4c\x1c\xba\xca\x81\x3d\xed\x01\x27\xd7\x66\xb7\x58\x69\xf6\x3b\xab\x61\xa3\xf7\xed\x7d\xa2\xa6\x54\x9d\xd9\x56\x1e\xa6\x07\x9d\x1d\xec\xfa\x38\xb0\xc0\xb6\xc0\xeb\x2c\xd1\x8f\x3f\x28\x57\x58\x56\x10\xd9\x62\x00\xfa\x90\x9c\x61\x41\x2f\xb2\xc6\x00\xfc\x21\xb9\xc3\x82\x0f\xd9\x63\x00\xf8\x90\x1c\x62\x01\xdf\x67\x91\x01\x6b\x0c\xc9\x25\x96\x35\x54\x36\x39\xd2\x02\xba\xf1\x75\x6d\x4f\xc0\xfe\x23\xd1\xac\xd7\xc7\xc4\x62\x6e\x40\x33\xe2\xab\xde\x9c\x3d\xb8\x19\x81\x3c\x90\x1b\x87\xb5\x35\x6f\xbe\x68\x72\xd1\x7e\x16\x33\x40\x13\x2f\x09\x8d\x3a\x22\x5d\x77\x9d\x3a\x1b\x32\x0f\x65\xe6\x38\x3d\xb9\x15\xf9\x58\x0d\xba\x15\xfc\x18\xdd\xba\x15\xf8\x38\xad\xbb\x15\xfa\x08\x7d\xbc\x15\xf7\x78\x4d\xbd\x15\xfe\xc5\x1d\xfe\x7c\xac\xde\xba\x9b\x8f\x8b\x57\x18\xdf\xcc\xc5\x7b\x77\xea\x0d\x40\x71\xcc\x29\x5f\x77\x12\x6f\x3b\xa9\xd7\xc9\x9c\xfd\x1b\x7a\x73\xf5\xa6\x86\x9a\xb2\x7f\x77\xa3\x32\xa7\x98\x37\xb1\xbe\x0f\x09\x6b\x4e\x2a\x68\xe3\x82\x58\xbd\x0e\xd8\x64\x60\xff\xbe\x82\x7e\x2f\xcd\x58\x65\xba\x94\xef\x56\x9a\x6f\x59\xc2\xc8\x9b\xfa\xdc\xbc\x08\x32\x1a\x5c\x85\xdb\x06\xa2\x66\xc1\xbc\x2b\xae\xe7\xe7\x07\xca\x23\xf4\x7f\x8d\xb2\xff\x06\xf4\xcd\xd1\x6c\x01\x7d\x9b\xf8\xf6\x21\x8e\x7f\xab\x4f\xd8\xed\xac\x70\xf3\x74\x39\xcf\x53\x5c\xb2\x24\x5e\x0e\x74\xe0\x16\x48\x9c\x84\xcb\x5f\x19\x07\x2f\x15\x92\x59\xd7\xf3\xe4\xf8\x6e\xd7\x3c\xaa\x11\xe6\x95\xf4\xf0\x05\xb0\xe1\x23\xb5\x0b\xd3\x3e\x50\x31\x41\x35\x29\x59\x54\xb5\x57\x0c\x5d\xa3\x90\xdb\x35\x53\x6e\xd5\xf3\x16\x3d\x34\x17\x95\xe1\x58\x11\x39\x4b\x4d\x3d\x43\x5a\x33\x6d\x1a\x51\x33\x85\xf9\x4b\x1d\xb4\xda\xb2\x60\x9b\x24\x01\xa8\xb0\x9b\xfd\x8a\x23\x1f\x24\xc1\x9e\xce\x59\x56\x30\xfa\xe5\xd8\x4f\x3e\xb6\x28\x22\xd6\x1d\x24\x03\x10\x38\x4b\x41\xd5\xcf\x35\xcc\x3a\x36\xbb\x2a\xea\x1f\xc4\x71\x41\xe3\x2c\x15\x6d\x3f\xdf\xc5\xc4\x63\xb3\x2e\x33\xe1\x41\x8c\x0b\x0a\x67\x29\xe9\xfa\x99\x16\xd3\x8e\xcd\x72\x59\x19\x1c\xc4\xb6\xa6\x72\x96\x25\x7d\x3f\xfb\x7a\xea\xb1\x45\xd0\x65\xd3\x41\x12\x28\x22\x67\xa9\xa9\xfb\xf9\x57\x33\x0f\x66\xbf\x25\x10\xb7\x92\x56\x79\xad\x57\x01\x1d\xc1\xb8\x55\x40\x24\x13\xff\xc2\x51\xc5\x7c\x9b\x70\x7f\x53\x0b\x15\x69\xcd\xd1\xe4\xf0\x6d\x8d\xe3\x1c\x62\xd2\xd7\x4e\x9f\xb8\xed\xbb\xe4\x85\x3c\x94\x7b\xeb\x35\x4c\x48\x0f\x7b\x21\x03\xd2\x2f\x5f\xb3\xb8\x8a\x4b\x2f\x5c\x5e\x45\xb3\xd7\x30\x20\x42\xf9\x0b\x57\x17\x09\xe0\x35\x4b\x57\x32\xe1\x0b\x39\xa8\xe4\xcf\xd7\x30\xa2\x8b\x8a\x17\x72\xa1\x4b\x91\x81\x2c\x74\x0c\xb5\xc5\x03\x0b\x09\x84\x98\xa2\x72\x6d\x16\xb4\x15\xe1\xda\x42\xc2\xf3\x73\x86\x93\x90\x20\xef\x0e\x6a\xef\xfe\xa2\x74\x8e\x6b\xda\x82\x9a\xfa\x4e\x34\xe3\x94\x3f\xed\x76\xfa\x9f\x01\x9d\x3c\x3f\x23\x4f\x54\xd9\x08\xee\xf5\x47\xad\x80\xf1\x6e\x1d\x55\xe6\xca\x97\x13\x7a\x02\xdb\x72\x1f\x9a\x3d\x5d\xeb\x0f\x0b\xc1\x92\xba\x26\x52\x1f\xc1\x57\xae\xab\x89\x7e\x14\x6d\x48\xb0\xf5\xc9\xf7\x25\x9d\xeb\x0e\x23\xfd\x48\x72\x3f\xa3\xa9\xb0\xe0\x20\x52\x45\xf6\x59\x9c\x64\x77\xf2\xd8\x32\x34\x1f\x63\xdb\x46\x30\xf7\x5b\x83\x5e\xfd\xba\xff\xbd\xd1\x30\x15\x0d\x5c\xb3\x03\xb3\xb3\x50\x35\xaa\xf8\x47\x13\x03\x36\x4a\xf1\xe0\xa3\xb3\xc7\xa8\xec\x65\xa9\x9d\xb6\xbe\xaa\x84\xa6\xc1\xc2\x29\xf7\x89\x53\x5b\xa9\x63\x21\x49\x1e\x5d\xd4\xa6\xab\x87\x14\x0e\x0a\x30\xc7\x2e\x67\x61\x18\x13\x57\x8e\x54\x57\xa8\x6e\xca\xe8\xa2\x67\x05\x65\xe7\x5f\x30\x8f\x7a\xb7\x62\x53\x59\xfa\xc1\x46\x8f\x14\x92\x6c\x1b\xf7\x4f\x12\x57\xa9\xdf\x5b\x05\xde\xa1\xdd\xda\x02\x31\x6d\xb0\x35\x80\xab\x92\xd8\x14\x4a\xab\x7a\x38\x88\x04\x2a\xc3\x42\x19\x9d\xca\xc0\x80\x64\x97\x2d\x87\x7e\x83\x5d\x23\xf6\xb4\x1c\x15\x37\x91\x8b\x6a\x3d\xf8\x1a\x43\x6c\x77\x65\x95\xe9\xdd\x71\x60\x08\xd4\xe0\x47\xc4\xbf\x77\x7d\x9a\xf9\x31\x01\x47\x92\x91\x9f\x3c\x02\xc1\x06\x0b\x07\x71\x79\x46\x41\x73\x72\x4c\x38\x99\x83\x30\xdc\x70\x8b\x83\xc8\x85\xc3\xb3\x2d\x71\x74\x37\x3e\x5c\x31\xfd\x1b\xa2\x36\x7d\x1b\x6b\x09\x1a\x99\xec\x40\x3d\x96\xbb\x60\xd8\x11\x46\x2b\x3f\xfb\x4d\xd1\x78\x46\x0f\x46\xd0\x11\xb8\x3d\x83\x74\x42\x63\x2b\x72\xe9\xa1\xe2\xc9\xab\x70\xca\x4a\x96\xb2\x86\xc4\xde\x75\x8a\xdd\x53\x66\x44\x00\x73\xac\xdb\xeb\x70\xe4\xc2\xf5\x51\x35\x35\xa0\x41\x31\xc0\x8a\x86\x55\x66\x16\x88\x9f\xc5\x3f\xe0\x15\x5b\x90\xe3\x2c\x24\x7c\xe1\xac\x62\x9c\xdc\x43\x0b\x0f\xf7\x0f\xd6\xc2\x7c\x1c\xd3\x43\x77\x4f\x7b\x9b\x63\x5f\x61\x68\x74\x1a\xce\xcb\x50\x1e\xfa\xd7\xee\xab\x0f\x8e\xde\xf2\xb5\xdd\x5e\x65\x68\xdc\x2c\x0a\xcb\x99\xb5\xaf\x65\xa9\x58\x19\x29\xbe\x17\x3b\x6d\x8f\x72\xba\xde\x26\x72\xee\xe9\x5b\xf3\x41\x6d\xce\x51\x91\xe3\xb2\x1c\x2d\x50\xc0\xfc\xed\x86\x40\x3d\xfc\xcf\x2d\xc9\x9e\xee\x48\x0c\x8b\xb0\xec\x43\x1c\x9f\x8e\x7e\x37\xf2\xe1\x1f\xa3\xb7\xcd\xd7\x05\x92\x9c\xc5\xc4\x8b\x59\x78\xaa\x41\x61\x4a\x6d\xce\x9a\x65\xe8\xf4\x0b\xce\x10\x85\xe5\xf4\x24\x2f\x26\x49\xc8\x23\x88\xd0\x93\xf7\x30\xb0\x5c\xa0\x73\xf8\x74\xdd\x26\xbf\xe2\xd2\x34\xbf\xd3\x3f\x3c\x96\xf8\x31\xf5\xef\x01\xa9\x14\x91\xd8\x68\xc4\x45\xbc\xc2\x51\xbc\xe2\xc5\xe1\x9f\xc4\xc9\xba\x74\xf8\xcf\x34\xe7\x5e\x81\x7a\x3a\x2a\xde\x27\x68\x0a\x26\xae\x5d\xfd\xd6\xde\xda\xbb\xb7\xa7\x6a\x3a\x18\x45\xa9\x7e\x3e\x2e\x0e\xda\xc5\xc9\xbb\xf8\xbf\x0a\xfc\x3b\x00\x00\xff\xff\x7c\x53\x61\xbe\x65\x40\x00\x00")

func templatesAnalysisTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAnalysisTemplateHtml,
		"templates/analysis-template.html",
	)
}

func templatesAnalysisTemplateHtml() (*asset, error) {
	bytes, err := templatesAnalysisTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/analysis-template.html", size: 16485, mode: os.FileMode(420), modTime: time.Unix(1462391746, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/analysis-template.html": templatesAnalysisTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"analysis-template.html": &bintree{templatesAnalysisTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

